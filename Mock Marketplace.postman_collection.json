{
	"info": {
		"_postman_id": "bf2259c7-2d9b-4b10-93d9-06d18f96a5bd",
		"name": "Mock Marketplace",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29165251",
		"_collection_link": "https://plentyteamonboarding2023.postman.co/workspace/Team-Onbording-Workspace~6649f13b-eb45-4464-821d-f125ab1bc7d3/collection/29556020-bf2259c7-2d9b-4b10-93d9-06d18f96a5bd?action=share&source=collection_link&creator=29165251"
	},
	"item": [
		{
			"name": "User-Microservice",
			"item": [
				{
					"name": "http://localhost:3001/user/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - token\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is saved as a collection variable\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
									"    \r",
									"    pm.collectionVariables.set(\"token\", responseData.token);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token variable is accessible in the console\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"    console.log(responseData.token);\r",
									"});\r",
									"\r",
									"pm.test(\"Token variable is Saved \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    console.log(pm.variables.get(\"token\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sellerID\": 2,\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"user",
								"register"
							]
						},
						"description": "This API endpoint is used to validate a user. It is an HTTP POST request that should be sent to [http://localhost:3001/user/validation](http://localhost:3001/user/validation).\n\nThe last execution of this request returned a response with a status code of 200 and a JSON body containing a message field.\n\nTo use this endpoint, you need to send a POST request to the specified URL. The request should include the necessary parameters for user validation. The response will indicate the success or failure of the validation process.\n\nPlease refer to the API documentation or contact the API provider for more information on the required request parameters and their formats.\n\nIf successful, the response will include a status code of 200 and an empty message field in the JSON body.\n\nPlease note that this is a sample response and the actual response may vary based on the specific implementation of the API."
					},
					"response": []
				},
				{
					"name": "http://localhost:3001/user/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Save Token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    console.log(pm.variables.get(\"token\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"authenticationApiKey\": \"{{apitoken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/user/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"user",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:3001/user/validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'message'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The 'message' field is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/user/validation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"user",
								"validation"
							]
						},
						"description": "This API endpoint is used to validate a user. It is an HTTP POST request that should be sent to [http://localhost:3001/user/validation](http://localhost:3001/user/validation).\n\nThe last execution of this request returned a response with a status code of 200 and a JSON body containing a message field.\n\nTo use this endpoint, you need to send a POST request to the specified URL. The request should include the necessary parameters for user validation. The response will indicate the success or failure of the validation process.\n\nPlease refer to the API documentation or contact the API provider for more information on the required request parameters and their formats.\n\nIf successful, the response will include a status code of 200 and an empty message field in the JSON body.\n\nPlease note that this is a sample response and the actual response may vary based on the specific implementation of the API."
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Management",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "http://localhost:3004/auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - token\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token is saved as a collection variable\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
											"    \r",
											"    pm.collectionVariables.set(\"token\", responseData.token);\r",
											"\r",
											"    pm.expect(pm.variables.get(\"token\")).to.exist.and.to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3004/user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "http://localhost:3004/product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Product response should contain product_id, product_name, categories, and manufacturers fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.product_id).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.product_name).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.categories).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.manufacturers).to.exist.and.to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Each variant has a valid GTIN (Global Trade Item Number)\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.variants).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.variants.forEach(function(variant) {\r",
											"        pm.expect(variant.gtin).to.match(/^\\d{8,14}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each variant has a non-empty variant_name and description\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.variants).to.be.an('array');\r",
											"    \r",
											"    responseData.variants.forEach(function(variant) {\r",
											"        pm.expect(variant.variant_name).to.exist.and.to.have.lengthOf.at.least(1, \"Variant name should not be empty\");\r",
											"        pm.expect(variant.description).to.exist.and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Variants array is present and contains expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.variants).to.exist.and.to.be.an('array');\r",
											"    pm.expect(responseData.variants).to.have.lengthOf(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_name\": \"{{$randomProduct}}\",\n    \"categories\": 1,\n    \"manufacturers\": 1,\n    \"deleted\": false,\n    \"variants\": [\n        {\n            \"product_id\": 1,\n            \"gtin\": \"98765432109001\",\n            \"variant_name\": \"{{$randomColor}}\",\n            \"description\": \"{{$randomLoremSentence}}\",\n            \"deleted\": false\n        },\n        {\n            \"product_id\": 1,\n            \"gtin\": \"98765432109002\",\n            \"variant_name\": \"{{$randomColor}}\",\n            \"description\": \"{{$randomLoremSentence}}\",\n            \"deleted\": false\n        },\n        {\n            \"product_id\": 1,\n            \"gtin\": \"98765432109003\",\n            \"variant_name\": \"{{$randomColor}}\",\n            \"description\": \"{{$randomLoremSentence}}\",\n            \"deleted\": false\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3004/product",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"product"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the 'data' array is present and contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
											"    pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Array should contain at least one element\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the 'pageCount' field is present and is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.pageCount).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.pageCount).to.be.at.least(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "http://localhost:3004/product?page=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"product"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/product/{gtin}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Product details should contain product_id, product_name, categories, and manufacturers fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.product_id).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.product_name).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.categories).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.manufacturers).to.exist.and.to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Variants array is present and contains expected number of elements (1)\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.variants).to.exist;\r",
											"    pm.expect(responseData.variants).to.be.an('array');\r",
											"    pm.expect(responseData.variants).to.have.lengthOf(1);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3004/product/98765432109001",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"product",
										"98765432109001"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/product/{gtin}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is present in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categories\": 1,\n    \"manufacturers\": 11111,\n    \"deleted\": true,\n    \"variants\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3004/product/98765432109001",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"product",
										"98765432109001"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/product/{gtin}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is present in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3004/product/98765432109001",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"product",
										"98765432109001"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Variantr",
					"item": [
						{
							"name": "http://localhost:3004/variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Product_id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.product_id).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Product_id should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Gtin is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.gtin).to.match(/^\\d{8,14}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Variant name must be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.variant_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Variant name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_id\": 1,\n    \"gtin\": \"98765432109004\",\n    \"variant_name\": \"SUper Extra Black\",\n    \"description\": \"Color: SUper Extra Black\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3004/variant",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"variant"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data array is present and contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each object in the 'data' array has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.data.forEach(function (item) {\r",
											"        pm.expect(item).to.include.all.keys('product_id', 'gtin', 'variant_name', 'description', 'deleted');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Page count is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.have.property('pageCount').that.is.a('number').and.is.gte(0, \"Page count should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Gtin is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.data.forEach(function(variant) {\r",
											"        pm.expect(variant.gtin).to.be.a('string').and.to.match(/^\\d{8,14}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3004/variant?page=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"variant"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/variant{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Gtin is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('gtin').that.is.a('string').and.match(/^\\d{8,14}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Variant name must be a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.variant_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Variant name should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3004/variant/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"variant",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/variant/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is present in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"product_id\": 1,\r\n        \"gtin\": \"98765432109001\",\r\n        \"variant_name\": \"lime\",\r\n        \"description\": \"Updated variant!\",\r\n        \"deleted\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3004/variant/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"variant",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://localhost:3004/variant/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is present and not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3004/variant/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3004",
									"path": [
										"variant",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Offer-Microservice",
			"item": [
				{
					"name": "deprecated",
					"item": [
						{
							"name": "(old) http://localhost:3004/api/offer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_gtin\": \"01234567890123\",\n    \"offer\": {\n        \"id\": 1,\n        \"uuid\": \"01234567890123\",\n        \"product_id\": 1,\n        \"sku\": \"ABC-12345-S-BL\",\n        \"price\": 12.5,\n        \"currency\": \"EUR\",\n        \"quantity\": 10,\n        \"discount\": 10,\n        \"deleted\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3002/offer",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3002",
									"path": [
										"offer"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(old) http://localhost:3004/api/offer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM5OTQ4NzB9.iuwberVnb1dcvnwCdqDPF1m25v4Dp-tgGpcW08zYjjc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ID\": 1,\n    \"product_id\": 1,\n    \"sku\": \"ABC-12345-S-BL-1111111111111111\",\n    \"price\": 30.5,\n    \"quantity\": 40,\n    \"discount\": 20,\n    \"deleted\": false,\n    \"currency\": \"EUR\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3002/offer/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3002",
									"path": [
										"offer",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "(old) http://localhost:3004/api/offer Copy",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM5OTQ4NzB9.iuwberVnb1dcvnwCdqDPF1m25v4Dp-tgGpcW08zYjjc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"ID\": 1,\n        \"product_id\": 1,\n        \"uuid\": \"01234567890123\",\n        \"price\": 12.5,\n        \"currency\": \"EUR\",\n        \"quantity\": 10,\n        \"discount\": 10,\n        \"deleted\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3002/offer/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3002",
									"path": [
										"offer",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "(old) http://localhost:3004/api/offer",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTM5OTQ4NzB9.iuwberVnb1dcvnwCdqDPF1m25v4Dp-tgGpcW08zYjjc",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3002/offer/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3002",
									"path": [
										"offer",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create offer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"SellerID\": 2,\n    \"Gtin\": 123456789,\n    \"Price\": 9.99,\n    \"Quantity\": 12\n}"
						},
						"url": {
							"raw": "http://localhost:3002/offers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve offer by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3002/offers/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"offers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve offers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3002/offers/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"offers",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "(internal) retrieve offer by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "secret",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3002/internal/offers/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"internal",
								"offers",
								"10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order-Microservice",
			"item": [
				{
					"name": "retrieve orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3003/orders?page=1&limit=10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve order by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3003/orders/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "(internal) create order by offer ids",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "secret",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offerIds\": [1,2,1]\n}"
						},
						"url": {
							"raw": "http://localhost:3003/internal/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"internal",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "update order status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderId\": 1,\n    \"status\": \"new\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3003/orders/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"orders",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "https://postman-echo.com/post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"authenticationApiKey\": \"{{apitoken}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://postman-echo.com/post",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://postman-echo.com/post",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "password",
			"type": "string"
		},
		{
			"key": "apitoken",
			"value": "secret",
			"type": "string"
		}
	]
}